"use strict";(self.webpackChunkcorgi_docs=self.webpackChunkcorgi_docs||[]).push([[2902],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2517:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(8957),a=(n(9496),n(9613));const i={sidebar_position:2},o="What is my purpose?",l={unversionedId:"why_it_exists",id:"why_it_exists",title:"What is my purpose?",description:"Purpose",source:"@site/docs/why_it_exists.md",sourceDirName:".",slug:"/why_it_exists",permalink:"/corgi/docs/why_it_exists",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/corgi/docs/intro"},next:{title:"Corgi compose items",permalink:"/corgi/docs/corgi_compose_items"}},s={},p=[{value:"What happens on init",id:"what-happens-on-init",level:2},{value:"What happens on run",id:"what-happens-on-run",level:2},{value:"Why GO?",id:"why-go",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...i}=e;return(0,a.kt)(d,(0,r.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"what-is-my-purpose"},"What is my purpose?"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Purpose",src:n(8277).Z,width:"1200",height:"630"})),(0,a.kt)("p",null,"As we expand services and go towards microservices architecture, we need to\nsomehow test many databases, that are started and run locally."),(0,a.kt)("p",null,"Creation, seeding, recreation of database is pretty cumbersome task, which this\ncli wants to improve."),(0,a.kt)("p",null,"It uses docker compose under the hood to run specific db instance in\ncontainerized fashion, which helps to start service and stop it, fill with info,\netc fast."),(0,a.kt)("p",null,"Here is example, that we will explain, based on\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Andriiklymiuk/corgi_examples/blob/main/postgres/postgres-seeded-go-reactnative.corgi-compose.yml"},"corgi-compose.yml postgres example")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"db_services:\n  postgres_with_data_for_go_reactnative:\n    driver: postgres\n    databaseName: bestDbName\n    user: awesomeUser\n    password: themostsecurepasswordyoucanimaging\n    port: 5511\n    seedFromFilePath: ./users_dump.sql\n\nservices:\n  reactnative_app_get_user:\n    cloneFrom: https://github.com/Andriiklymiuk/reactnative_app_get_user.git\n    path: ./reactnative_app_get_user\n    depends_on_services:\n      - name: go_server_user_data\n    beforeStart:\n      - yarn install\n      - npx pod-install\n    start:\n      - yarn start\n      - yarn ios\n    afterStart:\n      - yarn ios:simulator:close\n  go_server_user_data:\n    cloneFrom: https://github.com/Andriiklymiuk/go_server_user_data.git\n    path: ./go_server_user_data\n    port: 7012\n    depends_on_db:\n      - name: postgres_with_data_for_go_reactnative\n        envAlias: none\n    start:\n      - go run .\n\nrequired:\n  go:\n    why:\n      - To launch locally sync-go-trigger service manually\n      - You need to install it yourself brew install go\n    checkCmd: go version\n  yarn:\n    why:\n      - To build and launch some of the repos locally with yarn\n    install:\n      - brew install yarn\n    checkCmd: yarn -v\n  node:\n    why:\n      - To build and launch some of the repos locally with npm\n    install:\n      - brew install node\n    checkCmd: node -v\n  docker:\n    why:\n      - To launch databases\n      - You need to install it yourself from https://docs.docker.com/desktop/install/mac-install/\n    checkCmd: docker -v\n")),(0,a.kt)("h2",{id:"what-happens-on-init"},"What happens on init"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"It adds corgi compose files to gitignore"),(0,a.kt)("li",{parentName:"ol"},"Creates folder with db helpers files in in ",(0,a.kt)("inlineCode",{parentName:"li"},"corgi_services/db_services"),"\nfolder. These files are created, so that you can run db_services manually, if\nyou want."),(0,a.kt)("li",{parentName:"ol"},"If the path provided doesn't exist and cloneFrom is provided, than it will\nrun git clone with provided url. So, for example, you provide path to\nservice: ",(0,a.kt)("inlineCode",{parentName:"li"},"./myWoofServices/corgiserver"),", than it will run git clone in\n",(0,a.kt)("inlineCode",{parentName:"li"},"./myWoofServices/")," folder. ",(0,a.kt)("strong",{parentName:"li"},"Bare in mind"),", that git clone should create\n",(0,a.kt)("inlineCode",{parentName:"li"},"corgiserver")," folder to correctly work.")),(0,a.kt)("h2",{id:"what-happens-on-run"},"What happens on run"),(0,a.kt)("p",null,"If you run ",(0,a.kt)("inlineCode",{parentName:"p"},"corgi run")," it will:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create folder with db helpers files in in ",(0,a.kt)("inlineCode",{parentName:"li"},"corgi_services/db_services"),"\nfolder. These files are created, so that you can run db_services manually, if\nyou want."),(0,a.kt)("li",{parentName:"ol"},"If there are any db_services, than it will auto launch docker (if not\nlaunched)"),(0,a.kt)("li",{parentName:"ol"},"If there is --seed flag added, it will get db dump from ",(0,a.kt)("inlineCode",{parentName:"li"},"seedFromFilePath"),"\nfile dump or from ",(0,a.kt)("inlineCode",{parentName:"li"},"seedFromDb")," or database and populate database"),(0,a.kt)("li",{parentName:"ol"},"Start databases in docker (docker up)"),(0,a.kt)("li",{parentName:"ol"},"Check ",(0,a.kt)("inlineCode",{parentName:"li"},"depends_on_db")," part in each service and it will add env variables\n(DB_HOST, DB_USER, DB_NAME, DB_PORT ,DB_PASSWORD) for db in the .env file in\nservice path"),(0,a.kt)("li",{parentName:"ol"},"Check ",(0,a.kt)("inlineCode",{parentName:"li"},"depends_on_service")," part in each service and it will add env variables\nfor service (server/app, etc) in the .env file in service path in the form of\n",(0,a.kt)("inlineCode",{parentName:"li"},"http://localhost:POST_IN_DEPENDENT_SERVICE")," (in corgiApp it will add\n",(0,a.kt)("inlineCode",{parentName:"li"},"http://localhost:8965"),")"),(0,a.kt)("li",{parentName:"ol"},"Runs each service ",(0,a.kt)("strong",{parentName:"li"},"concurrently")," (in parallel)")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Runs scripts in ",(0,a.kt)("inlineCode",{parentName:"li"},"beforeStart")," of service"),(0,a.kt)("li",{parentName:"ul"},"Runs scripts in ",(0,a.kt)("inlineCode",{parentName:"li"},"start")," of service ",(0,a.kt)("strong",{parentName:"li"},"concurrently")," (in parallel)")),(0,a.kt)("ol",{start:8},(0,a.kt)("li",{parentName:"ol"},"If you run ",(0,a.kt)("inlineCode",{parentName:"li"},"Ctrl-C")," in terminal, it will:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"terminate all services and their scripts"),(0,a.kt)("li",{parentName:"ul"},"stop all databases"),(0,a.kt)("li",{parentName:"ul"},"runs all ",(0,a.kt)("inlineCode",{parentName:"li"},"afterStart")," commands")),(0,a.kt)("h2",{id:"why-go"},"Why GO?"),(0,a.kt)("p",null,"It is written in GOLANG in order to be: fast and simple, without ton of\ndependencies. Language isn't that different from javascript of typescript, so it\ncan be used by everyone, can be learnt in one day."),(0,a.kt)("p",null,"This project is also a proof of concept, that Go is simple, fast and easy to be\nwritten, so we can use it to create microservices and write automation."),(0,a.kt)("p",null,"Pros of using go"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"easy to use and fast to write production level code"),(0,a.kt)("li",{parentName:"ul"},"most things can be done with standard lib itself"),(0,a.kt)("li",{parentName:"ul"},"small (if we remove all fancy staff, then the binary will be around 1mb more\nor less)"),(0,a.kt)("li",{parentName:"ul"},"makes you think about error handling during coding itself"),(0,a.kt)("li",{parentName:"ul"},"formatting and testing out of the box"),(0,a.kt)("li",{parentName:"ul"},"concurrent from the box (parallel simply speaking) (socket will be cool to\nwrite in go)")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"In short"),": install go and you are good to go"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},(0,a.kt)("strong",{parentName:"em"},"P.S.")),": go is not needed to use cli"))}u.isMDXComponent=!0},8277:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/purpose-43b9d8bb85018ee9f08a25618eca316e.jpeg"}}]);