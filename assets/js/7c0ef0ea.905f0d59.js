"use strict";(self.webpackChunkcorgi_docs=self.webpackChunkcorgi_docs||[]).push([[5968],{1904:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var o=n(6425),t=(n(7953),n(8860));const i={},a="corgi run",c={unversionedId:"commands/corgi_run",id:"commands/corgi_run",title:"corgi run",description:"corgi run",source:"@site/docs/commands/corgi_run.md",sourceDirName:"commands",slug:"/commands/corgi_run",permalink:"/corgi/docs/commands/corgi_run",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"corgi pull",permalink:"/corgi/docs/commands/corgi_pull"},next:{title:"corgi script",permalink:"/corgi/docs/commands/corgi_script"}},s={},l=[{value:"corgi run",id:"corgi-run-1",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3},{value:"Auto generated by spf13/cobra on 2-Sep-2024",id:"auto-generated-by-spf13cobra-on-2-sep-2024",level:6}],p={toc:l},d="wrapper";function u(e){let{components:r,...n}=e;return(0,t.yg)(d,(0,o.A)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"corgi-run"},"corgi run"),(0,t.yg)("h2",{id:"corgi-run-1"},"corgi run"),(0,t.yg)("p",null,"Run all databases and services"),(0,t.yg)("h3",{id:"synopsis"},"Synopsis"),(0,t.yg)("p",null,"This command helps to run all services and their dependent services."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"corgi run [flags]\n")),(0,t.yg)("h3",{id:"options"},"Options"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"      --dbServices strings   Slice of db_services to choose from.\n                             \n                             If you provide at least 1 db_service here, than corgi will choose only this db_service, while ignoring all others.\n                             none - will ignore all db_services run.\n                             (--dbServices db,db1,db2)\n                             \n                             By default all db_services are included and run.\n                                    \n  -h, --help                 help for run\n      --no-watch             Dusable watch for changes in corgi-compose file\n      --omit strings         Slice of parts of service to omit.\n                             \n                             beforeStart - beforeStart in services is omitted.\n                             afterStart - afterStart in services is omitted.\n                             \n                             By default nothing is omitted\n                                    \n      --pull                 Pull services repo changes\n  -s, --seed                 Seed all db_services that have seedSource or have dump.sql / dump.bak or other dump file in their folder\n      --services strings     Slice of services to choose from.\n                             \n                             If you provide at least 1 services here, than corgi will choose only this service, while ignoring all others.\n                             none - will ignore all services run.\n                             (--services app,server)\n                             \n                             By default all services are included and run.\n                                    \n")),(0,t.yg)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},'      --describe                  Describe contents of corgi-compose file\n      --dockerContext string      Specify docker context to use, can be default,orbctl,colima (default "default")\n  -l, --exampleList               List examples to choose from. Click on any example to download it\n  -f, --filename string           Custom filepath for for corgi-compose\n      --fromScratch               Clean corgi_services folder before running\n  -t, --fromTemplate string       Create corgi service from template url\n      --fromTemplateName string   Create corgi service from template name and url\n  -g, --global                    Use global path to one of the services\n      --privateToken string       Private token for private repositories to download files\n      --runOnce                   Run corgi once and exit\n      --silent                    Hide all welcome messages\n')),(0,t.yg)("h3",{id:"see-also"},"SEE ALSO"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"corgi"},"corgi"),"\t - Corgi cli magic friend")),(0,t.yg)("h6",{id:"auto-generated-by-spf13cobra-on-2-sep-2024"},"Auto generated by spf13/cobra on 2-Sep-2024"))}u.isMDXComponent=!0},8860:(e,r,n)=>{n.d(r,{xA:()=>p,yg:()=>m});var o=n(7953);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,o,t=function(e,r){if(null==e)return{};var n,o,t={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var s=o.createContext({}),l=function(e){var r=o.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},p=function(e){var r=l(e.components);return o.createElement(s.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},g=o.forwardRef((function(e,r){var n=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),g=t,m=d["".concat(s,".").concat(g)]||d[g]||u[g]||i;return n?o.createElement(m,a(a({ref:r},p),{},{components:n})):o.createElement(m,a({ref:r},p))}));function m(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var i=n.length,a=new Array(i);a[0]=g;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c[d]="string"==typeof e?e:t,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"}}]);