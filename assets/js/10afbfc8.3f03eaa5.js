"use strict";(self.webpackChunkcorgi_docs=self.webpackChunkcorgi_docs||[]).push([[6695],{9613:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>N});var a=n(9496);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function d(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),p=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=p(t.components);return a.createElement(o.Provider,{value:e},t.children)},s="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},k=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,m=d(t,["components","mdxType","originalType","parentName"]),s=p(n),k=r,N=s["".concat(o,".").concat(k)]||s[k]||u[k]||l;return n?a.createElement(N,i(i({ref:e},m),{},{components:n})):a.createElement(N,i({ref:e},m))}));function N(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=k;var d={};for(var o in e)hasOwnProperty.call(e,o)&&(d[o]=e[o]);d.originalType=t,d[s]="string"==typeof t?t:r,i[1]=d;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},4142:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=n(8957),r=(n(9496),n(9613));const l={sidebar_position:3},i="Corgi compose items",d={unversionedId:"corgi_compose_items",id:"corgi_compose_items",title:"Corgi compose items",description:"Links meme",source:"@site/docs/corgi_compose_items.md",sourceDirName:".",slug:"/corgi_compose_items",permalink:"/corgi/docs/corgi_compose_items",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"What is my purpose?",permalink:"/corgi/docs/why_it_exists"},next:{title:"Commands",permalink:"/corgi/docs/category/commands"}},o={},p=[],m={toc:p},s="wrapper";function u(t){let{components:e,...l}=t;return(0,r.kt)(s,(0,a.Z)({},m,l,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"corgi-compose-items"},"Corgi compose items"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Links meme",src:n(3278).Z,width:"1200",height:"675"})),(0,r.kt)("p",null,"Examples of these items usage can be found in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Andriiklymiuk/corgi_examples"},"examples repo"),"."),(0,r.kt)("p",null,"You can add service in services part of yml file."),(0,r.kt)("p",null,"Corgi compose ",(0,r.kt)("inlineCode",{parentName:"p"},"service")," can contain the following items (properties):"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Item"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"),(0,r.kt)("th",{parentName:"tr",align:null},"itemType"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cloneFrom"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"git@github.com:Andriiklymiuk/corgi.git")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Git url to target repo. By default nothing is cloned.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"branch"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"some/feature/branch")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Branch to use for git checkout. By default default branch for repo is used.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"environment"),(0,r.kt)("td",{parentName:"tr",align:"left"},"- YOUR_ENV=dev- YOUR__ANTOHER_ENV=abcdef"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]string")),(0,r.kt)("td",{parentName:"tr",align:null},"List of environment variables to copy and put into your env file.By default no environments are added.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"envPath"),(0,r.kt)("td",{parentName:"tr",align:"left"},"./path/to/.env"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Path to .env file in target repo. By default .env file is used")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ignoreEnv"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Should service ignore env and don't change env file or not. By default is false (env is not ignored)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:"left"},"./path/to/target/repo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Path to the actual project repo.By default the path to the folder in which corgi-compose.yml is used")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"copyEnvFromFilePath"),(0,r.kt)("td",{parentName:"tr",align:"left"},"./path/to/.env-file-to-copy-from"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The path to the .env, which content will be copied to service repo .env file")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"port"),(0,r.kt)("td",{parentName:"tr",align:"left"},"5432"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"Service port, that will be added to .env file.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"manualRun"),(0,r.kt)("td",{parentName:"tr",align:"left"},"true"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Determines if the service will be run with run cmd.If it is true, that to run you add ",(0,r.kt)("inlineCode",{parentName:"td"},"--services manual_to_run_service")," to run cmd.By default it is false.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"depends_on_db"),(0,r.kt)("td",{parentName:"tr",align:"left"},"- name: db_name_from_db_services- envAlias: NAME_BEFORE_DB_IN_ENV"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]DependsOnDb")),(0,r.kt)("td",{parentName:"tr",align:null},"Adds db credentials (",(0,r.kt)("inlineCode",{parentName:"td"},"DB_HOST"),",etc) from db_services will be copied to .env.envAlias adds string before db credentials, like NAME_BEFORE_DB_IN_ENV_DB_HOST")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"depends_on_services"),(0,r.kt)("td",{parentName:"tr",align:"left"},"- name: service_name- envAlias: NAME_TO_USE_IN_ENV- suffix: /special/suffix"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]DependsOnService")),(0,r.kt)("td",{parentName:"tr",align:null},"Adds service credentials to .env.suffix is added at the end of added valueNAME_TO_USE_IN_ENV=localhost:port/special/suffix will be added to .envIf you add just name, than it is SERVICE_NAME=localhost:port_in_env")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"beforeStart"),(0,r.kt)("td",{parentName:"tr",align:"left"},"- install dependencies- do some builds"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]string")),(0,r.kt)("td",{parentName:"tr",align:null},"List of commands to run consequently, before start commands are run.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"start"),(0,r.kt)("td",{parentName:"tr",align:"left"},"- run your service- run some other stuff"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]string")),(0,r.kt)("td",{parentName:"tr",align:null},"List of commands to run in parallel for the service needs.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"afterStart"),(0,r.kt)("td",{parentName:"tr",align:"left"},"- do some needed cleanups"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]string")),(0,r.kt)("td",{parentName:"tr",align:null},"List of commands to run consequently, when the cli is exited.")))),(0,r.kt)("p",null,"Also, you can add service in db_services part. Corgi compose ",(0,r.kt)("inlineCode",{parentName:"p"},"db_service")," can\ncontain the following items (properties):"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Item"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"),(0,r.kt)("th",{parentName:"tr",align:null},"itemType"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"driver"),(0,r.kt)("td",{parentName:"tr",align:"left"},"postgres"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"This is database driver for this service. By default postgres is used. For now it supports: postgres, mongodb, mysql, mariadb, mssql, rabbitmq, sqs, kafka redis, dynamodb, cassandra, cockroach, clickhouse, scylla, keydb.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"host"),(0,r.kt)("td",{parentName:"tr",align:"left"},"localhost"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"This is database host for this service, that will be used in ",(0,r.kt)("inlineCode",{parentName:"td"},"DB_HOST"),". By default localhost is used")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"version"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.0.1"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"This is database version for the service creation. By default latest is used")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"databaseName"),(0,r.kt)("td",{parentName:"tr",align:"left"},"corgi-database"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"This is database name for this service, that will be used in ",(0,r.kt)("inlineCode",{parentName:"td"},"DB_NAME"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"user"),(0,r.kt)("td",{parentName:"tr",align:"left"},"corgi"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"This is database user for this service, that will be used in ",(0,r.kt)("inlineCode",{parentName:"td"},"DB_USER"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"password"),(0,r.kt)("td",{parentName:"tr",align:"left"},"corgiSecurePassword"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"This is database password for this service, that will be used in ",(0,r.kt)("inlineCode",{parentName:"td"},"DB_PASSWORD"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"port"),(0,r.kt)("td",{parentName:"tr",align:"left"},"5432"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"This is database port for this service, that will be used in ",(0,r.kt)("inlineCode",{parentName:"td"},"DB_PORT"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"seedFromFilePath"),(0,r.kt)("td",{parentName:"tr",align:"left"},"./path/to/dump.sql"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Path to dump.sql file from which data is seeded.Use either seedFromFilePath or seedFromDb/seedFromDbEnvPath")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"seedFromDbEnvPath"),(0,r.kt)("td",{parentName:"tr",align:"left"},"./path/to/db/info/.env"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Path to .env file with db credentials for db, from which data is seeded.Use either seedFromFilePath or seedFromDb/seedFromDbEnvPath")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"seedFromDb"),(0,r.kt)("td",{parentName:"tr",align:"left"},"- host: seed_db_host- databaseName: seed_db_name- user: seed_db_user- password: seed_db_password- port: seed_db_port"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SeedFromDb")),(0,r.kt)("td",{parentName:"tr",align:null},"Db credentials to seed from.Use either seedFromFilePath or seedFromDb/seedFromDbEnvPath")))),(0,r.kt)("p",null,"Also, you can add required items in required part. Corgi compose ",(0,r.kt)("inlineCode",{parentName:"p"},"required")," can\ncontain the following items (properties):"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Item"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"),(0,r.kt)("th",{parentName:"tr",align:null},"itemType"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"why"),(0,r.kt)("td",{parentName:"tr",align:"left"},"- pass butter- help with service X"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]string")),(0,r.kt)("td",{parentName:"tr",align:null},"The reasons to use/install this required command.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"install"),(0,r.kt)("td",{parentName:"tr",align:"left"},"- install cmd 1- install cmd 2"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]string")),(0,r.kt)("td",{parentName:"tr",align:null},"Installation steps to run, if cmd not found.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"optional"),(0,r.kt)("td",{parentName:"tr",align:"left"},"true"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Show or not the prompt, before this cmd installation.By default false.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"checkCmd"),(0,r.kt)("td",{parentName:"tr",align:"left"},"this_command -v"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Command to run to check, if it is installed.By default cmd name is used.")))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/intro"},"Main docs")))}u.isMDXComponent=!0},3278:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/links_meme-4e25a9222405537f084af6d51eb7c181.jpg"}}]);